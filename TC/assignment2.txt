Tropin Andrew BS3-5

Emacs. A great operating system, lacking only a decent editor.

Many people encounter text-editing tasks in their everyday work(Ex. managers, developers, writers, etc.). Moreover, in most cases their salary depends on how efficient such tasks are performed. It is almost impossible to work well with text without a proper tool. Nowadays a myriad of text editors exists and only few of them are  suitable for efficient editing. That is why it is important for people, whose work is tightly connected with text, to know about Emacs(one of the most powerful and advanced text editors). The paper introduces to a history of text editors and covers basics of Emacs, its advantages and disadvantages. It can be interesting for everyone who is connected to a computer science.

Originally, text editors were created for engineers and operators, who were smart and worked a lot with source code and configuration files, in 1969. Ed was a simple line editor with command interface. It is very important to distinguish text editors and text processors, read the Wikipedia article about editors if you are confused.
A few years later, in 1976 a screen-oriented editor vi that operate with the whole screen, not only with one line, was released. It retained many editing principles from ed. In the same year Emacs was released. It heavily uses modificators(Ctrl, Alt) for hotkeys and series of hotkeys(chords). Vim is vi's descendant, which has more features and abilities to extend and customize functionality viaprogramming language. 
When GUI started to gather, momentum editors divided into two main parts. The first part is beautiful and simple tools for ordinary users that helps to type several lines of code. The second part is extensible, complex programs with well-minded and sometimes tricky interface, which are designed to help work with huge amounts of text. Both parts have their own advantages and disadvantages, but for efficiency, it is not necessary for tool to be simple and beautiful, however it is critical to be extensible and powerful, that is why the representative of the second part will be discussed. 

Emacs is open-source, extensible, customizable and self-documented. Also, it has a long history of active development(nearly 40 years). Originally it was a terminal text editor, but now it has a GUI and it is not something special. GUI  is not the  main feature at all; it is just a shell and only allows to render images and characters. Core of Emacs is that almost everything in it is written in Lisp programming language, which is extremely powerful and allows to modify elements of interface, behaviour of functions(deleting word for example), even meaning of terms(what one is proper word for you? thIs, th_at 0r m*ybe th√•t) and obviously to create new ones at runtime. There exists thousands of extensions(packages) for all occasions in life mostly because of facts that Emacs supports Lisp and has a huge and smart community. Extensibility and graphic interface are important, but very abstract in terms of text editing, that is why it is necessary to understand main features and terms that are still alive after 40 years of active developing and showing their worth.However, it is more advanced topic.

Nothing can be ideal and Emacs is not  an exception. Three main problems exist in it. First is the steep learning curve. It is trying to compensate for this by the presence of comprehensive documentation, but it is still needed to spend several weeks to become confident with it. Second is the legacy. Because of features of development process today Emacs looks like 30 years ago. Vanilla Emacs is ugly and poor, has awkwargd hotkeys and requires adjustment. Configuration is a third problem, but after performing it Emacs becomes an ultimate tool. There exists already preconfigured bundles, which solve most of that problems such as spacemacs.

As a conclusion worth mentioning that Emacs is a community-driven tool for advanced users by advanced users, it requires time to adapt, but moves you to a new level. In this paper, a brief history of text editors and superficially description of cons and pros of Emacs were covered. For more advanced description and application of editors look at following work: "Spacemacs. Best of two worlds of advanced text editing."



Spacemacs. Best of two worlds of advanced text editing.

Text editing is a part of the lives of many people, but often they don't pay enough attention to the choice of tools, they pay with their time for this. Primary goal of this paper is to highlight main problems of emacs text editor and to describe solution of that problems. Paper covers basics terms of Emacs and Vim  and their main ideas(modes, modal editing). After reading this article it will be possible to understand what brings spacemacs and why it was created.

All basic terms and features of emacs are connected with a buffer. A buffer is an object in memory containing text for edition, it can be associated with a file or  not(scratch buffer for example). Several buffers may exist at one time. Buffer can be displayed in window(pane is more common name for it) and several windows can be placed in one frame(window is more common name for it). Such abstractions make work with text more efficient(many files can be in workflow in one time), moreover there is interface designed around buffers and windows which  allow to work with it as with usual text. For example search results is also a buffer with a text(matches), but with a little bit different behavior(when hotkey is pressed on matched text, source buffer with occurrence will be shown).

Suchlike reaction achieves using modes.Every buffer is associated with one major mode and several minor modes. Major mode determines most of hotkeys, rendering, behavior of function and meaning of text objects and other terms. Minor mode brings only small changes in behavior(closing of matched parentheses or quotes for example). These basic ideas and extensions allows you to work with your mail, scientific calculations, programming languages, technical papers, etc. without leaving text editor. Emacs is extensible, self-documented and has good ideas at the basis, but suffers from uncomfortable keybindings, which heavily uses modificators, ugly and poor user interface.

Vim's default UI is looks ancient too, furthermore extension's language is poor and inexpressive, but Vim has great modal editing features and excellent shortcuts. There are several states(normal, insert, visual, etc.). Insert state is familiar for everyone, input characters just being inserted into a buffer. On the other hand Normal state interprets input characters as commands. For example `dib` removes whole text inside brackets. It allows to keep hands on the home row of keyboard and to make shortcuts mnemonic(delete inside brackets) and consistent.

Spacemacs is the most powerful text editor with a modern and comfortable GUI, it adheres to the four core pillars: Mnemonic, Discoverable, Consistent and "Crowd-Configured". Actually it is not a separate program it is a bundle of extensions neatly gathered and configured on top of Emacs, which uses ideas of vim-style editing. It make sense, because it brings great experience from two worlds of most advanced text-editing tools. Both Vim and Emacs are oldest, currently developing, competing open-source text editors with huge community. Usually they are opposed, but spacemacs tries to combine them.

This paper highlights most significant problems of Emacs, describes basics of two most advanced text editors and shows their weak point. Spacemacs proposed as a solution because it takes best of Vim and Emacs, changes editing style to more ergonomic and brings good default configuration with modern and compfortable GUI.




